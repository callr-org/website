<%
<%-- Use RSP directives to identify current directory --%>
path <- dirname("<%@meta name="source"%>")
source(file.path(path, "printCode.R"))
%>

localenv <- base::environment()

<%----------------------------------------------------------------
 Importing from R.oo
 ----------------------------------------------------------------%>
trim <- <% printCode("trim", class="default", envir="R.oo") %>


<%----------------------------------------------------------------
 Importing from R.utils
 ----------------------------------------------------------------%>
isPackageInstalled <- <% printCode("isPackageInstalled", class="default", envir="R.utils") %>

findSourceTraceback <- <% printCode("findSourceTraceback", class="default", envir="R.utils") %>

<% for (name in c("captureOutput", "mprint", "mcat", "mstr", "mprintf")) { %>
<%=name%> <- <% printCode(name, envir="R.utils") %>
<% } # for (name ...) %>


withVerbose <- function(expr, ..., envir=parent.frame()) {
  if (hasParameter("verbose", TRUE)) {
    base::eval(expr, envir=envir)
  }
  invisible()
} # withVerbose()


hasParameter <- function(name, value=NULL) {
  params <- base::getOption("parameters", NULL)
  if (!is.element(name, names(params))) return(FALSE)
  if (is.null(value)) return(TRUE)

  # Check if parameter has the requested value
  param <- params[[name]]

  # For logical values, allow for T, F, 1 and 0.
  if (mode(value) == "logical") {
    param <- switch(as.character(param), T=TRUE, F=FALSE, "1"=TRUE, "0"=FALSE, as.logical(param))
  }

  (param == value)
} # hasParameter()


hasUrlProtocol <- <% printCode("hasUrlProtocol", class="default", envir="R.utils") %>

# Parse URL
<%@include file="splitUrl.R"%>

parseUrl <- function() {
  # Don't assume 'utils' is attached
  URLdecode <- utils::URLdecode

  url <- base::getOption("debug_url")
  if (is.null(url)) {
    # Find all URL calls
    urls <- names(findSourceTraceback())
    pattern <- "^([abcdefghijklmnopqrstuvwxyz]+)(://)(.*)"
    urls <- base::grep(pattern, urls, value=TRUE)

    # Nothing found?
    if (length(urls) == 0L) return(list())

    # Use the most first one
    url <- urls[1L]
  }

  # Parse URL
  res <- splitUrl(url)

  # Set URL parameters globally
  base::options(parameters=res$query_parsed)

  res
} # parseUrl()


requireRemotes <- function(quiet=FALSE, ...) {
  if (!isPackageInstalled("remotes")) {
    message("Need to install 'remotes' and friends first ...")
    message("  This may take a few moments, but is a one time thing.")
    utils::install.packages("remotes", quiet=quiet, ...)
    message("Need to install 'remotes' and friends first ... DONE")
  }
} # requireRemotes()


requireRrsp <- function() {
  if (!isPackageInstalled("R.rsp")) {
    message("Need to install 'R.rsp' and friends first ...")
    message("  This make take a few minutes, but is a one time thing.")
    base::source("<%=urlroot%>/install#R.rsp")
    message("Need to install 'R.rsp' and friends first ... DONE")
  }
}


<%----------------------------------------------------------------
 HISTORY:
 2014-09-20
 o Added support for URL parameter verbose=TRUE.
 o Added getParameter() and withVerbose(). Dropped all d*().
 2014-09-17
 o Now captureOutput() is also imported from R.utils.
 2014-09-03
 o Added splitUrl() and parseUrl().
 o Created. Now dynamically importing utility function from
   various source/packages.
 ----------------------------------------------------------------%>
